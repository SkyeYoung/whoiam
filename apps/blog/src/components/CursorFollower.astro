---
// CursorFollower component for iPad-style pointer effect
---

<div id="cursor-follower" class="cursor-follower">
  <div class="cursor-dot"></div>
</div>

<style>
  .cursor-follower {
    position: fixed;
    top: 0;
    left: 0;
    width: 32px;
    height: 32px;
    pointer-events: none;
    z-index: 9999;
    opacity: 0;
    transform: translate(-50%, -50%);
    transition:
      opacity 0.2s ease-out,
      transform 0.1s ease-out;
  }

  .cursor-follower.active {
    opacity: 1;
  }

  .cursor-dot {
    width: 100%;
    height: 100%;
    background: rgba(124, 58, 237, 0.8);
    border-radius: 50%;
    backdrop-filter: blur(8px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow:
      0 4px 20px rgba(124, 58, 237, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transition: all 0.2s ease-out;
  }

  .cursor-follower.hover .cursor-dot {
    transform: scale(1.5);
    background: rgba(124, 58, 237, 0.9);
    box-shadow:
      0 6px 30px rgba(124, 58, 237, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
  }

  /* Dark mode styles */
  :global(.dark) .cursor-dot {
    background: rgba(196, 132, 252, 0.8);
    border: 2px solid rgba(255, 255, 255, 0.2);
    box-shadow:
      0 4px 20px rgba(196, 132, 252, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  :global(.dark) .cursor-follower.hover .cursor-dot {
    background: rgba(196, 132, 252, 0.9);
    box-shadow:
      0 6px 30px rgba(196, 132, 252, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  /* Hide on touch devices */
  @media (hover: none) {
    .cursor-follower {
      display: none;
    }
  }
</style>

<script>
  class CursorFollower {
    private follower: HTMLElement | null = null;
    private isActive = false;
    private rafId = 0;
    private targetX = 0;
    private targetY = 0;
    private currentX = 0;
    private currentY = 0;

    constructor() {
      this.init();
    }

    init() {
      this.follower = document.getElementById('cursor-follower');
      if (!this.follower) return;

      // Only show on devices with hover capability
      if (!window.matchMedia('(hover: hover)').matches) {
        return;
      }

      this.bindEvents();
      this.animate();
    }

    bindEvents() {
      // Show cursor follower when hovering over external links
      document.addEventListener(
        'mouseenter',
        (e) => {
          const target = e.target as HTMLElement;
          if (target.closest('.cursor-follow-wrapper')) {
            this.show();
          }
        },
        true
      );

      // Hide cursor follower when leaving external links
      document.addEventListener(
        'mouseleave',
        (e) => {
          const target = e.target as HTMLElement;
          if (target.closest('.cursor-follow-wrapper')) {
            this.hide();
          }
        },
        true
      );

      // Track mouse movement
      document.addEventListener('mousemove', (e) => {
        this.targetX = e.clientX;
        this.targetY = e.clientY;
      });

      // Handle hover state for scaling effect
      document.addEventListener(
        'mouseenter',
        (e) => {
          const target = e.target as HTMLElement;
          const linkWrapper = target.closest('.cursor-follow-wrapper');
          if (linkWrapper && this.follower) {
            this.follower.classList.add('hover');
          }
        },
        true
      );

      document.addEventListener(
        'mouseleave',
        (e) => {
          const target = e.target as HTMLElement;
          const linkWrapper = target.closest('.cursor-follow-wrapper');
          if (linkWrapper && this.follower) {
            this.follower.classList.remove('hover');
          }
        },
        true
      );
    }

    show() {
      if (!this.follower) return;
      this.isActive = true;
      this.follower.classList.add('active');
    }

    hide() {
      if (!this.follower) return;
      this.isActive = false;
      this.follower.classList.remove('active', 'hover');
    }

    animate() {
      if (this.isActive && this.follower) {
        // Smooth interpolation for natural movement
        this.currentX += (this.targetX - this.currentX) * 0.2;
        this.currentY += (this.targetY - this.currentY) * 0.2;

        this.follower.style.transform = `translate(${this.currentX}px, ${this.currentY}px) translate(-50%, -50%)`;
      }

      this.rafId = requestAnimationFrame(() => this.animate());
    }

    destroy() {
      if (this.rafId) {
        cancelAnimationFrame(this.rafId);
      }
    }
  }

  // Initialize cursor follower
  document.addEventListener('DOMContentLoaded', () => {
    new CursorFollower();
  });

  // Handle page transitions in Astro
  document.addEventListener('astro:page-load', () => {
    new CursorFollower();
  });
</script>

